{"version":3,"sources":["components/TodoFilter/TodoFilter.tsx","api.ts","App.tsx","components/Loader/Loader.tsx","components/TodoList/TodoList.tsx","components/TodoModal/TodoModal.tsx","index.tsx"],"names":["TodoFilter","query","onReset","onApplyQuery","onHandleInputQuery","onHandleFilterType","className","onChange","event","target","value","type","placeholder","style","pointerEvents","onClick","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterType","Loader","TodoList","todos","todoSelectedId","onTodoSelect","onMixTodos","map","todo","classNames","id","completed","title","TodoModal","onClose","useState","user","setUser","isUserLoaded","setIsUserLoaded","useEffect","userId","currentUser","href","email","name","App","setTodos","todoSelected","setTodoSelected","isLoaded","setIsLoaded","visibleTodos","setVisibleTodos","setQuery","appliedQuery","setAppliedQuery","ALL","typeOfSelection","setTypeOfSelection","finally","ACTIVE","filter","COMPLETED","lowQuery","toLowerCase","currentTodos","includes","applyQuery","useCallback","debounce","inputQuery","selectType","selectedTodo","todosVisible","sort","Math","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b4daca90.chunk.js","sourcesContent":["/* eslint-disable no-debugger */\n/* eslint-disable no-console */\ntype Props = {\n  query: string,\n  onReset: () => void,\n  onApplyQuery: (query1: string) => void,\n  onHandleInputQuery: (inputQuery: string) => void,\n  onHandleFilterType: (selectType: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onReset,\n  onApplyQuery,\n  onHandleInputQuery,\n  onHandleFilterType,\n}) => {\n  return (\n    <>\n      <form className=\"field has-addons\">\n        <p className=\"control\">\n          <span className=\"select\">\n            <select\n              data-cy=\"statusSelect\"\n              onChange={event => onHandleFilterType(event.target.value)}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </span>\n        </p>\n\n        <p className=\"control is-expanded has-icons-left has-icons-right\">\n          <input\n            data-cy=\"searchInput\"\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"Search...\"\n            value={query}\n            onChange={event => {\n              onHandleInputQuery(event.target.value);\n              onApplyQuery(event.target.value);\n            }}\n          />\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-magnifying-glass\" />\n          </span>\n\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {query && (\n              // eslint-disable-next-line jsx-a11y/control-has-associated-label\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => {\n                  onReset();\n                  onHandleInputQuery('');\n                }}\n              />\n            )}\n          </span>\n        </p>\n      </form>\n    </>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable no-console */\n/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport debounce from 'lodash.debounce';\n\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { Loader } from './components/Loader';\nimport { TodoList } from './components/TodoList';\nimport { TodoModal } from './components/TodoModal';\n\nenum FilterType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todoSelected, setTodoSelected] = useState<Todo | null>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>(todos);\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [typeOfSelection, setTypeOfSelection] = useState<string>(FilterType.ALL);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .finally(() => setIsLoaded(true));\n  }, []);\n\n  useEffect(() => {\n    switch (typeOfSelection) {\n      case FilterType.ALL:\n        setVisibleTodos(todos);\n        break;\n\n      case FilterType.ACTIVE:\n        setVisibleTodos(todos\n          .filter(todo => todo.completed === false));\n        break;\n\n      case FilterType.COMPLETED:\n        setVisibleTodos(todos.filter(todo => todo.completed === true));\n        break;\n\n      default:\n        break;\n    }\n\n    const lowQuery = appliedQuery.toLowerCase();\n\n    setVisibleTodos(currentTodos => currentTodos\n      .filter(todo => todo.title.toLowerCase().includes(lowQuery)));\n  }, [typeOfSelection, appliedQuery, todos]);\n\n  const applyQuery = useCallback(\n    debounce(setAppliedQuery, 1000),\n    [],\n  );\n\n  const handleInputQuery = (inputQuery: string) => {\n    setQuery(inputQuery);\n  };\n\n  const handleFilterType = (selectType: string) => {\n    setTypeOfSelection(selectType);\n  };\n\n  const handleTodoSelect = (selectedTodo: Todo | null) => {\n    setTodoSelected(selectedTodo);\n  };\n\n  const mixTodos = (todosVisible: Todo[]) => {\n    setVisibleTodos([...todosVisible].sort(() => Math.random() - 0.5));\n  };\n\n  const reset = () => setQuery('');\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onReset={reset}\n                onApplyQuery={applyQuery}\n                onHandleInputQuery={handleInputQuery}\n                onHandleFilterType={handleFilterType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!isLoaded\n                ? (<Loader />)\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    todoSelectedId={todoSelected?.id || 0}\n                    onTodoSelect={handleTodoSelect}\n                    onMixTodos={mixTodos}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {todoSelected && (\n        <TodoModal\n          todo={todoSelected}\n          onClose={setTodoSelected}\n        />\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  todoSelectedId: number,\n  onTodoSelect: (selectedTodo: Todo | null) => void,\n  onMixTodos: (todos: Todo[]) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  todoSelectedId,\n  onTodoSelect,\n  onMixTodos,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => onMixTodos(todos)}\n            >\n              Mix Todos\n            </button>\n          </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            className={classNames(\n              {\n                'has-background-info-light': todo.id === todoSelectedId,\n              },\n            )}\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames(\n                { 'has-text-danger': !todo.completed },\n                { 'has-text-success': todo.completed },\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              {todoSelectedId === todo.id ? (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    onTodoSelect(null);\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye-slash\" />\n                  </span>\n                </button>\n              )\n                : (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => {\n                      onTodoSelect(todo);\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo,\n  onClose: (todo: Todo | null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isUserLoaded, setIsUserLoaded] = useState(false);\n\n  useEffect(() => {\n    getUser(todo.userId).then(currentUser => {\n      setUser(currentUser);\n      setIsUserLoaded(true);\n    });\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!isUserLoaded\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todo.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => {\n                  setIsUserLoaded(false);\n                  onClose(null);\n                }}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {todo.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {todo.completed\n                  ? (\n                    <strong className=\"has-text-success\">Done</strong>\n                  )\n                  : (\n                    <strong className=\"has-text-danger\">Planned</strong>\n                  )}\n                {' by '}\n\n                <a href={`mailto:${user?.email}`}>\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}